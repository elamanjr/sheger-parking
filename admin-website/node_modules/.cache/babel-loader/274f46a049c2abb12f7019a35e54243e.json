{"ast":null,"code":"var _jsxFileName = \"/home/kb/Desktop/Personal/projects/versioned react parking/v011/src/components/reservation/Reservations.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { ShowReservations } from './reservationActions';\nimport { baseURL } from '../../sourceData/data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Reservations() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let [reservationList, setReservationList] = useState([]);\n  let [selectedReservationList, setSelectedReservationList] = useState([]);\n  let [loadStatus, setLoadStatus] = useState('loading');\n  let [client, setClient] = useState([]);\n  let [branches, setBranches] = useState([]);\n  let [clientIdVN, setclientIdVN] = useState({});\n  let [branchIdVN, setbranchIdVN] = useState({});\n\n  async function FetchReservations() {\n    _s();\n\n    useEffect(() => {\n      fetch(`${baseURL}/reservations`, {\n        method: 'GET'\n      }).then(response => {\n        response = resp;\n        setLoadStatus(response.status); // response.body.json()\n\n        console.log(response);\n      }).then(resp => {\n        setReservationList(resp);\n        setSelectedReservationList(resp);\n      });\n      fetch(`${baseURL}/branches`, {\n        method: 'GET'\n      }).then(response => response.json()).then(resp => {\n        setBranches(resp);\n      });\n      fetch(`${baseURL}/clients`, {\n        method: 'GET'\n      }).then(response => response.json()).then(resp => {\n        setClient(resp);\n      });\n    }, []);\n  }\n\n  _s(FetchReservations, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  useEffect(() => {\n    var clientDict = {};\n    client.map(item => {\n      clientDict[item.id] = item.fullName;\n    });\n    setclientIdVN(clientDict);\n  }, [client]);\n  useEffect(() => {\n    var branchDict = {};\n    branches.map(item => {\n      branchDict[item.id] = item.name;\n    });\n    setbranchIdVN(branchDict);\n  }, [branches]);\n  FetchReservations();\n  setInterval(() => {\n    FetchReservations();\n  }, 60000);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(ShowReservations, {\n        reservationList: reservationList,\n        selectedReservationList: selectedReservationList,\n        setSelectedReservationList: setSelectedReservationList,\n        clientIdVN: clientIdVN,\n        branchIdVN: branchIdVN,\n        loadStatus: loadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Reservations, \"JE0oz1mDf0ZTfYkRPzbIDfdoBuI=\");\n\n_c = Reservations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reservations\");","map":{"version":3,"sources":["/home/kb/Desktop/Personal/projects/versioned react parking/v011/src/components/reservation/Reservations.js"],"names":["React","useEffect","useState","Route","Routes","ShowReservations","baseURL","Reservations","reservationList","setReservationList","selectedReservationList","setSelectedReservationList","loadStatus","setLoadStatus","client","setClient","branches","setBranches","clientIdVN","setclientIdVN","branchIdVN","setbranchIdVN","FetchReservations","fetch","method","then","response","resp","status","console","log","json","clientDict","map","item","id","fullName","branchDict","name","setInterval"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { ShowReservations } from './reservationActions';\n\nimport {baseURL} from '../../sourceData/data';\n\n\nexport default function Reservations() {\n  let [reservationList, setReservationList] = useState([]);\n  let [selectedReservationList, setSelectedReservationList] = useState([]);\n\n  let [loadStatus, setLoadStatus] = useState('loading');\n\n\n  let [client, setClient] = useState([]);\n  let [branches, setBranches] = useState([]);\n  let [clientIdVN, setclientIdVN] =useState({});\n  let [branchIdVN, setbranchIdVN] =useState({});\n\n  async function FetchReservations() {\n    useEffect(() => {\n      fetch(`${baseURL}/reservations`, {\n        method: 'GET',\n      })\n        .then((response) => \n\n        {\n          response = resp\n          setLoadStatus(response.status)\n          // response.body.json()\n          console.log(response)\n          \n        })\n        .then((resp) => {\n            setReservationList(resp);\n          setSelectedReservationList(resp);\n\n          \n        });\n\n        \n\n        fetch(`${baseURL}/branches`, {\n        method: 'GET',\n      })\n        .then((response) => response.json())\n        .then((resp) => {\n            setBranches(resp);\n        });\n\n        fetch(`${baseURL}/clients`, {\n        method: 'GET',\n      })\n        .then((response) => response.json())\n        .then((resp) => {\n            setClient(resp);\n        });\n    }, []);\n  }\n\n  useEffect(() => {\n      var clientDict = {}\n      client.map((item)=>{\n        clientDict[item.id]=item.fullName;\n      })\n      setclientIdVN(clientDict)\n  },[client])\n\n  useEffect(() => {\n    var branchDict = {}\n    branches.map((item)=>{\n        branchDict[item.id]=item.name;\n    })\n    setbranchIdVN(branchDict)\n},[branches])\n\n  FetchReservations();\n\n  setInterval(() => {\n    FetchReservations();\n  }, 60000);\n\n\n  return (\n    <Routes>\n      <Route\n        exact\n        path=\"/\"\n        element={\n          <ShowReservations\n          reservationList={reservationList}\n          selectedReservationList={selectedReservationList}\n          setSelectedReservationList={setSelectedReservationList}\n          clientIdVN={clientIdVN}\n          branchIdVN={branchIdVN}\n          loadStatus={loadStatus}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}